<?php
/*
Plugin Name: Really Simple CAPTCHA
Plugin URI: https://contactform7.com/captcha/
Description: Really Simple CAPTCHA is a CAPTCHA module intended to be called from other plugins. It is originally created for my Contact Form 7 plugin.
Author: Takayuki Miyoshi
Author URI: https://ideasilo.wordpress.com/
Text Domain: really-simple-captcha
Version: 2.0.1
 */
header ('Content-Type: image/png');

define('REALLYSIMPLECAPTCHA_VERSION', '2.0.1');

class ReallySimpleCaptcha
{

    public $chars;
    public $char_length;
    public $fonts;
    public $tmp_dir;
    public $img_size;
    public $bg;
    public $fg;
    public $base;
    public $font_size;
    public $font_char_width;
    public $img_type;
    public $file_mode;
    public $answer_file_mode;

    public function __construct()
    {
        /* Characters available in images */
        $this->chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';

        /* Length of a word in an image */
        $this->char_length = 4;

        /* Array of fonts. Randomly picked up per character */
        $this->fonts = array(
            dirname(__FILE__) . '/gentium/GenBkBasR.ttf',
            dirname(__FILE__) . '/gentium/GenBkBasI.ttf',
            dirname(__FILE__) . '/gentium/GenBkBasBI.ttf',
            dirname(__FILE__) . '/gentium/GenBkBasB.ttf',
        );

        /* Directory temporary keeping CAPTCHA images and corresponding text files */
        $this->tmp_dir = __DIR__ . '/tmp';

        /* Array of CAPTCHA image size. Width and height */
        $this->img_size = array(72, 24);

        /* Background color of CAPTCHA image. RGB color 0-255 */
        $this->bg = array(255, 255, 255);

        /* Foreground (character) color of CAPTCHA image. RGB color 0-255 */
        $this->fg = array(0, 0, 0);

        /* Coordinates for a text in an image. I don't know the meaning. Just adjust. */
        $this->base = array(6, 18);

        /* Font size */
        $this->font_size = 14;

        /* Width of a character */
        $this->font_char_width = 15;

        /* Image type. 'png', 'gif' or 'jpeg' */
        $this->img_type = 'png';

        /* Mode of temporary image files */
        $this->file_mode = 0644;

        /* Mode of temporary answer text files */
        $this->answer_file_mode = 0640;
    }

    /**
     * Generate and return a random word.
     *
     * @return string Random word with $chars characters x $char_length length
     */
    public function generate_random_word()
    {
        $word = '';

        for ($i = 0; $i < $this->char_length; $i++) {
            $pos = mt_rand(0, strlen($this->chars) - 1);
            $char = $this->chars[$pos];
            $word .= $char;
        }

        return $word;
    }

    /**
     * Generate CAPTCHA image and corresponding answer file.
     *
     * @param string $prefix File prefix used for both files
     * @param string $word Random word generated by generate_random_word()
     * @return string|bool The file name of the CAPTCHA image. Return false if temp directory is not available.
     */
    public function generate_image($prefix, $word)
    {
        // if (!$this->make_tmp_dir()) {
        //     return false;
        // }

        // $this->cleanup();

        $dir = $this->tmp_dir . "/";
        $filename = null;

        if ($im = imagecreatetruecolor($this->img_size[0], $this->img_size[1])) {
            $bg = imagecolorallocate($im, $this->bg[0], $this->bg[1], $this->bg[2]);
            $fg = imagecolorallocate($im, $this->fg[0], $this->fg[1], $this->fg[2]);

            imagefill($im, 0, 0, $bg);

            $x = $this->base[0] + mt_rand(-2, 2);

            for ($i = 0; $i < strlen($word); $i++) {
                $font = $this->fonts[array_rand($this->fonts)];
                $font = $this->normalize_path($font);

                imagettftext($im, $this->font_size, mt_rand(-12, 12), $x,
                    $this->base[1] + mt_rand(-2, 2), $fg, $font, $word[$i]);
                $x += $this->font_char_width;
            }

            switch ($this->img_type) {
                case 'jpeg':
                    $filename = sanitize_file_name($prefix . '.jpeg');
                    $file = $this->normalize_path($dir . $filename);
                    imagejpeg($im, $file);
                    break;
                case 'gif':
                    $filename = sanitize_file_name($prefix . '.gif');
                    $file = $this->normalize_path($dir . $filename);
                    imagegif($im, $file);
                    break;
                case 'png':
                default:
                    $filename = $prefix . '.png';
                    $file = $this->normalize_path($dir . $filename);
                    imagepng($im, $file);
            }

            imagedestroy($im);
            chmod($file, $this->file_mode);
        }

        return $filename;
    }

    /**
     * Normalize a filesystem path.
     *
     * This should be replaced by wp_normalize_path when the plugin's
     * minimum requirement becomes WordPress 3.9 or higher.
     *
     * @param string $path Path to normalize.
     * @return string Normalized path.
     */
    private function normalize_path($path)
    {
        $path = str_replace('\\', '/', $path);
        $path = preg_replace('|/+|', '/', $path);
        return $path;
    }
}
